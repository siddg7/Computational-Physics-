"""
Created on Mon Apr 20 17:46:31 2020

Linear Algebra Functions

Functions
--------------

1. Gauss Elimination with pivoting
2. Backward Substitution
3. Forward Substitution
4. LU Decomposition
5. Matrix Inverse

@author: Siddharth
"""

import numpy as np

def gauss_elimination(A):
    
    n = A.shape[0]
    
    for i in range(0,n-1):
            
        A[[i,np.argmax(A[:,i])]] = A[[np.argmax(A[:,i]),i]]
        
        for j in range(i+1,n):
            
            A[j] = A[j] - (A[j][i]/A[i][i])*A[i]
    
    return A

def backward_substitution(A,B):
    
    x = np.zeros(B.shape)
    n = A.shape[0]
    
    x[n-1] = B[n-1]/A[n-1][n-1]
    for i in range(n-2, -1, -1):
        
        x[i] = (B[i] - np.sum(np.multiply(A[i],x)))/A[i][i]
        
    return x

def forward_substitution(A,B):
    
    x = np.zeros(B.shape)
    n = A.shape[0]

           
    x[0] = B[0]/A[0][0]

    for i in range(1,n):
        
        x[i] = (B[i] - np.sum(np.multiply(A[i],x)))/A[i][i]
        
    return x

def LUdecompose(A):
    
    L = np.identity(A.shape[0])
    U = np.zeros(A.shape)
    U = A
    n = A.shape[0]
    
    for i in range(0,n-1):
        
        for j in range(i+1,n):
            
            L[j][i] = (U[j][i]/U[i][i])
            U[j] = U[j] - (U[j][i]/U[i][i])*U[i]
            
    return np.array([L,U])

def solvewithLU(A,B):
    
    x = np.array(B.shape)
    d = np.array(B.shape)
    
    L = np.array(A.shape)
    U = np.array(A.shape)
    L = LUdecompose(A)[0]
    U = LUdecompose(A)[1]
    
    d = forward_substitution(L,B)
    x = backward_substitution(U,d)
    
    return x





def inverse(A):
    e1 = np.array(([1.0,0.0,0.0]))
    e2 = np.array(([0.0,1.0,0.0]))
    e3 = np.array(([0.0,0.0,1.0]))
    return np.array([solvewithLU(A,e1),solvewithLU(A,e2),solvewithLU(A,e3)])
